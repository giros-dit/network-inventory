{
	"info": {
		"_postman_id": "d85c697f-7c3c-4fab-a1ee-a44f35242295",
		"name": "Network-Inventory",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Platform Registry",
			"item": [
				{
					"name": "Register r1",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"platform_id\": \"r1\",\n  \"platform_name\": \"cEOS\",\n  \"vendor\": \"Arista\",\n  \"software_version\": \"4.27.4M\",\n  \"gnmi\": {\n    \"address\": \"172.16.238.11\",\n    \"port\": 6030,\n    \"credentials\": {\n      \"username\": \"admin\",\n      \"password\": \"admin\"\n    }\n  },\n  \"netconf\": {\n    \"address\": \"172.16.238.11\",\n    \"port\": 830,\n    \"credentials\": {\n      \"username\": \"admin\",\n      \"password\": \"admin\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8090/platforms",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"platforms"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Context Broker",
			"item": [
				{
					"name": "1. Find r1 router by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Link",
								"value": "<{{context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{broker}}/ngsi-ld/v1/entities/?type=Platform&q=id~%3Dr1",
							"protocol": "http",
							"host": [
								"{{broker}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "Platform"
								},
								{
									"key": "q",
									"value": "id~%3Dr1"
								}
							]
						},
						"description": "This example returns the data of `urn:ngsi-ld:Building:farm001`. The NGSI-LD `@context` is supplied as a [`Link` header](https://www.w3.org/wiki/LinkHeader) to define the entities returned. The `ngsi-context.jsonld` `@context` file is just supplying short names for every attribute.\n\nThe full link header syntax can be seen below:\n\n```text\nLink: <https://fiware.github.io/data-models/context.jsonld>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\n```\n\nThe standard HTTP `Link` header allows metadata (in this case the `@context`) to be passed in without actually touching\nthe resource in question. In the case of NGSI-LD, the metadata is a file in `application/ld+json` format."
					},
					"response": []
				},
				{
					"name": "2. Check NMDA-support for r1 router",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Link",
								"value": "<{{context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{broker}}/ngsi-ld/v1/entities/?type=Datastore&q=supportedBy%3D%3Durn%3Angsi-ld%3APlatform%3Ar1",
							"protocol": "http",
							"host": [
								"{{broker}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "Datastore"
								},
								{
									"key": "q",
									"value": "supportedBy%3D%3Durn%3Angsi-ld%3APlatform%3Ar1"
								}
							]
						},
						"description": "This example returns the data of `urn:ngsi-ld:Building:farm001`. The NGSI-LD `@context` is supplied as a [`Link` header](https://www.w3.org/wiki/LinkHeader) to define the entities returned. The `ngsi-context.jsonld` `@context` file is just supplying short names for every attribute.\n\nThe full link header syntax can be seen below:\n\n```text\nLink: <https://fiware.github.io/data-models/context.jsonld>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\n```\n\nThe standard HTTP `Link` header allows metadata (in this case the `@context`) to be passed in without actually touching\nthe resource in question. In the case of NGSI-LD, the metadata is a file in `application/ld+json` format."
					},
					"response": []
				},
				{
					"name": "3. Get ModuleSet of r1 router",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Link",
								"value": "<{{context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{broker}}/ngsi-ld/v1/entities/?type=ModuleSet&q=definedBy%3D%3Durn%3Angsi-ld%3APlatform%3Ar1",
							"protocol": "http",
							"host": [
								"{{broker}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "ModuleSet"
								},
								{
									"key": "q",
									"value": "definedBy%3D%3Durn%3Angsi-ld%3APlatform%3Ar1"
								}
							]
						},
						"description": "This example returns the data of `urn:ngsi-ld:Building:farm001`. The NGSI-LD `@context` is supplied as a [`Link` header](https://www.w3.org/wiki/LinkHeader) to define the entities returned. The `ngsi-context.jsonld` `@context` file is just supplying short names for every attribute.\n\nThe full link header syntax can be seen below:\n\n```text\nLink: <https://fiware.github.io/data-models/context.jsonld>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\n```\n\nThe standard HTTP `Link` header allows metadata (in this case the `@context`) to be passed in without actually touching\nthe resource in question. In the case of NGSI-LD, the metadata is a file in `application/ld+json` format."
					},
					"response": []
				},
				{
					"name": "4. Get interface modules that belong to ModuleSet of r1 router",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Link",
								"value": "<{{context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{broker}}/ngsi-ld/v1/entities/?type=Module&q=belongsTo%3D%3Durn%3Angsi-ld%3AModuleSet%3Aurn%3Angsi-ld%3APlatform%3Ar1%3Adefault%3Bdescription~%3Dinterface&attrs=name%2Crevision%2C%20description%2Cschema%2CbelongsTo",
							"protocol": "http",
							"host": [
								"{{broker}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "Module"
								},
								{
									"key": "q",
									"value": "belongsTo%3D%3Durn%3Angsi-ld%3AModuleSet%3Aurn%3Angsi-ld%3APlatform%3Ar1%3Adefault%3Bdescription~%3Dinterface"
								},
								{
									"key": "attrs",
									"value": "name%2Crevision%2C%20description%2Cschema%2CbelongsTo"
								}
							]
						},
						"description": "This example returns the data of `urn:ngsi-ld:Building:farm001`. The NGSI-LD `@context` is supplied as a [`Link` header](https://www.w3.org/wiki/LinkHeader) to define the entities returned. The `ngsi-context.jsonld` `@context` file is just supplying short names for every attribute.\n\nThe full link header syntax can be seen below:\n\n```text\nLink: <https://fiware.github.io/data-models/context.jsonld>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\n```\n\nThe standard HTTP `Link` header allows metadata (in this case the `@context`) to be passed in without actually touching\nthe resource in question. In the case of NGSI-LD, the metadata is a file in `application/ld+json` format."
					},
					"response": []
				},
				{
					"name": "5. Get module dependencies of openconfig-interfaces",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Link",
								"value": "<{{context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{broker}}/ngsi-ld/v1/entities/?type=Module&q=hasDependents%3D%3Durn%3Angsi-ld%3AModule%3Aopenconfig-interfaces%3A2021-04-06%3Aopenconfig%3BbelongsTo%3D%3Durn%3Angsi-ld%3AModuleSet%3Aurn%3Angsi-ld%3APlatform%3Ar1%3Adefault&attrs=schema",
							"protocol": "http",
							"host": [
								"{{broker}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "Module"
								},
								{
									"key": "q",
									"value": "hasDependents%3D%3Durn%3Angsi-ld%3AModule%3Aopenconfig-interfaces%3A2021-04-06%3Aopenconfig%3BbelongsTo%3D%3Durn%3Angsi-ld%3AModuleSet%3Aurn%3Angsi-ld%3APlatform%3Ar1%3Adefault"
								},
								{
									"key": "attrs",
									"value": "schema"
								}
							]
						},
						"description": "This example returns the data of `urn:ngsi-ld:Building:farm001`. The NGSI-LD `@context` is supplied as a [`Link` header](https://www.w3.org/wiki/LinkHeader) to define the entities returned. The `ngsi-context.jsonld` `@context` file is just supplying short names for every attribute.\n\nThe full link header syntax can be seen below:\n\n```text\nLink: <https://fiware.github.io/data-models/context.jsonld>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\n```\n\nThe standard HTTP `Link` header allows metadata (in this case the `@context`) to be passed in without actually touching\nthe resource in question. In the case of NGSI-LD, the metadata is a file in `application/ld+json` format."
					},
					"response": []
				},
				{
					"name": "6. Get  submodule dependencies of openconfig-interfaces Copy",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Link",
								"value": "<{{context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{broker}}/ngsi-ld/v1/entities/?type=Submodule&q=hasDependencies%3D%3DmoduleID%3BbelongsTo%3D%3DmoduleSetID&attrs=schema,hasDependencies",
							"protocol": "http",
							"host": [
								"{{broker}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "Submodule"
								},
								{
									"key": "q",
									"value": "hasDependencies%3D%3DmoduleID%3BbelongsTo%3D%3DmoduleSetID"
								},
								{
									"key": "attrs",
									"value": "schema,hasDependencies"
								}
							]
						},
						"description": "This example returns the data of `urn:ngsi-ld:Building:farm001`. The NGSI-LD `@context` is supplied as a [`Link` header](https://www.w3.org/wiki/LinkHeader) to define the entities returned. The `ngsi-context.jsonld` `@context` file is just supplying short names for every attribute.\n\nThe full link header syntax can be seen below:\n\n```text\nLink: <https://fiware.github.io/data-models/context.jsonld>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\n```\n\nThe standard HTTP `Link` header allows metadata (in this case the `@context`) to be passed in without actually touching\nthe resource in question. In the case of NGSI-LD, the metadata is a file in `application/ld+json` format."
					},
					"response": []
				},
				{
					"name": "7. Get modules that augment openconfig-interfaces",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Link",
								"value": "<{{context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{broker}}/ngsi-ld/v1/entities/?type=Module&q=hasDependencies%3D%3Durn%3Angsi-ld%3AModule%3Aopenconfig-interfaces%3A2021-04-06%3Aopenconfig%3BbelongsTo%3D%3Durn%3Angsi-ld%3AModuleSet%3Aurn%3Angsi-ld%3APlatform%3Ar1%3Adefault&attrs=name%2Crevision%2Cschema%2ChasDependencies",
							"protocol": "http",
							"host": [
								"{{broker}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "Module"
								},
								{
									"key": "q",
									"value": "hasDependencies%3D%3Durn%3Angsi-ld%3AModule%3Aopenconfig-interfaces%3A2021-04-06%3Aopenconfig%3BbelongsTo%3D%3Durn%3Angsi-ld%3AModuleSet%3Aurn%3Angsi-ld%3APlatform%3Ar1%3Adefault"
								},
								{
									"key": "attrs",
									"value": "name%2Crevision%2Cschema%2ChasDependencies"
								}
							]
						},
						"description": "This example returns the data of `urn:ngsi-ld:Building:farm001`. The NGSI-LD `@context` is supplied as a [`Link` header](https://www.w3.org/wiki/LinkHeader) to define the entities returned. The `ngsi-context.jsonld` `@context` file is just supplying short names for every attribute.\n\nThe full link header syntax can be seen below:\n\n```text\nLink: <https://fiware.github.io/data-models/context.jsonld>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\n```\n\nThe standard HTTP `Link` header allows metadata (in this case the `@context`) to be passed in without actually touching\nthe resource in question. In the case of NGSI-LD, the metadata is a file in `application/ld+json` format."
					},
					"response": []
				},
				{
					"name": "8. Get protocols supported by r1 router",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Link",
								"value": "<{{context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{broker}}/ngsi-ld/v1/entities/?type=Protocol&q=supportedBy%3D%3Durn%3Angsi-ld%3APlatform%3Ar1",
							"protocol": "http",
							"host": [
								"{{broker}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "Protocol"
								},
								{
									"key": "q",
									"value": "supportedBy%3D%3Durn%3Angsi-ld%3APlatform%3Ar1"
								}
							]
						},
						"description": "This example returns the data of `urn:ngsi-ld:Building:farm001`. The NGSI-LD `@context` is supplied as a [`Link` header](https://www.w3.org/wiki/LinkHeader) to define the entities returned. The `ngsi-context.jsonld` `@context` file is just supplying short names for every attribute.\n\nThe full link header syntax can be seen below:\n\n```text\nLink: <https://fiware.github.io/data-models/context.jsonld>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\n```\n\nThe standard HTTP `Link` header allows metadata (in this case the `@context`) to be passed in without actually touching\nthe resource in question. In the case of NGSI-LD, the metadata is a file in `application/ld+json` format."
					},
					"response": []
				}
			]
		},
		{
			"name": "Fing module by name",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Link",
						"value": "<{{context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://{{broker}}/ngsi-ld/v1/entities/?type=Module&q=name%3D%3D%22openconfig%2Dinterfaces%22&attrs=name",
					"protocol": "http",
					"host": [
						"{{broker}}"
					],
					"path": [
						"ngsi-ld",
						"v1",
						"entities",
						""
					],
					"query": [
						{
							"key": "type",
							"value": "Module"
						},
						{
							"key": "q",
							"value": "name%3D%3D%22openconfig%2Dinterfaces%22"
						},
						{
							"key": "attrs",
							"value": "name"
						}
					]
				},
				"description": "This example returns the data of `urn:ngsi-ld:Building:farm001`. The NGSI-LD `@context` is supplied as a [`Link` header](https://www.w3.org/wiki/LinkHeader) to define the entities returned. The `ngsi-context.jsonld` `@context` file is just supplying short names for every attribute.\n\nThe full link header syntax can be seen below:\n\n```text\nLink: <https://fiware.github.io/data-models/context.jsonld>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\n```\n\nThe standard HTTP `Link` header allows metadata (in this case the `@context`) to be passed in without actually touching\nthe resource in question. In the case of NGSI-LD, the metadata is a file in `application/ld+json` format."
			},
			"response": []
		},
		{
			"name": "Get dependencies of module",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Link",
						"value": "<{{context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://{{broker}}/ngsi-ld/v1/entities/?type=Module&q=isDependencyOf%3D%3Durn%3Angsi-ld%3AModule%3Acisco-xe-openconfig-interfaces-deviation%3A2017-05-08%3Acisco&attrs=name,revision",
					"protocol": "http",
					"host": [
						"{{broker}}"
					],
					"path": [
						"ngsi-ld",
						"v1",
						"entities",
						""
					],
					"query": [
						{
							"key": "type",
							"value": "Module"
						},
						{
							"key": "q",
							"value": "isDependencyOf%3D%3Durn%3Angsi-ld%3AModule%3Acisco-xe-openconfig-interfaces-deviation%3A2017-05-08%3Acisco"
						},
						{
							"key": "attrs",
							"value": "name,revision"
						}
					]
				},
				"description": "This example returns the data of `urn:ngsi-ld:Building:farm001`. The NGSI-LD `@context` is supplied as a [`Link` header](https://www.w3.org/wiki/LinkHeader) to define the entities returned. The `ngsi-context.jsonld` `@context` file is just supplying short names for every attribute.\n\nThe full link header syntax can be seen below:\n\n```text\nLink: <https://fiware.github.io/data-models/context.jsonld>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\n```\n\nThe standard HTTP `Link` header allows metadata (in this case the `@context`) to be passed in without actually touching\nthe resource in question. In the case of NGSI-LD, the metadata is a file in `application/ld+json` format."
			},
			"response": []
		},
		{
			"name": "Register cisco",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"platform_id\": \"ios-xr\",\n  \"platform_name\": \"IOS XRv 9000\",\n  \"vendor\": \"Cisco\",\n  \"software_version\": \"10\",\n  \"netconf\": {\n    \"address\": \"131.226.217.150\",\n    \"port\": 830,\n    \"credentials\": {\n      \"username\": \"admin\",\n      \"password\": \"C1sco12345\"\n    }\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8090/platforms",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8090",
					"path": [
						"platforms"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "context.jsonld",
			"value": "http://context-catalog:8080/context.jsonld",
			"type": "default"
		},
		{
			"key": "broker",
			"value": "localhost:9090",
			"type": "default"
		}
	]
}
